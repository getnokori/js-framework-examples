import Head from 'next/head'
import { Inter } from '@next/font/google'
import styles from '@/styles/Home.module.css'
import { useEffect, useState } from 'react'

const inter = Inter({ subsets: ['latin'] })

type OrderItem = {
  orderId: string,
  createdAt: string,
  productName: string,
  quantity: string,
  customerId: string,
}

type Orders = {
  orders?: OrderItem[]
  error?: any 
}


export default function Home() {
  const [loadingData, setLoadingData] = useState(true);
  const [data, setData] = useState( [] as OrderItem[]);

  useEffect(() => {
    async function getData() {
      const res = await fetch('/api/orders')
      const {orders, error}: Orders = await res.json();

      if (error) {
        console.error(error);
      }

      if(orders && !error) {
        setData(orders);
        setLoadingData(false);
      }
    }
    
    if (loadingData) {
      getData();
    }
  });

  return (
    <>
      <Head>
        <title>Next.js nokori Example</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
    <div className={styles.wrapper}>
      <h1>Next.js nokori Example</h1>
      <p className={styles.p}>
        In this fictitious example, we are fetching customer orders from our database of soda orders at
        our soda shop.
      </p>
      <h2 className={styles.orderList}>Orders list</h2>
      {/* here you check if the state is loading otherwise if you wioll not call that you will get a blank page because the data is an empty array at the moment of mounting */}
      {
        loadingData ? (
          <p>Loading Please wait...</p>
        ) : (
        <table>
          <thead>
          <tr>
            <th>Order ID</th>
            <th>Product Name</th>
            <th>Quantity</th>
            <th>Customer Id</th>
          </tr>
          </thead>
          <tbody>
          { 
          !loadingData && data && data?.map((order) => {
            return <tr key={order.orderId}>
              <td>{order.orderId}</td>
              <td>{order.productName}</td>
              <td>{order.quantity}</td>
              <td>{order.customerId}</td>
            </tr>
          })
          }
          </tbody>
        </table>
      )}
    </div>
  </main>
  </>
  )
}

